" _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
"            _
"     __   _(_)_ __ ___  _ __ ___
"     \ \ / / | '_ ` _ \| '__/ __|
"      \ V /| | | | | | | | | (__
"       \_/ |_|_| |_| |_|_|  \___|
"
" _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/


" Disable automatic detection
" - filetype
" - plugin correlated with filetype
" - indent correlated with filetype
filetype off
filetype plugin indent off

" Specify language
language C
language ctype en_US.UTF-8

" Forward slash is used when expanding file names
if exists('+shellslash')
    set shellslash
endif


" --------------------------------------------------
"  Runtime path and variable settings
" --------------------------------------------------
let $MYVIMHOME = fnamemodify(expand($MYVIMRC), ":p:h")

let s:undodir_root = expand('$HOME/.cache/vim/undodir')
if !isdirectory(s:undodir_root)
    call mkdir(s:undodir_root, 'p')
endif


" --------------------------------------------------
"  Option configurations (for function)
" --------------------------------------------------
" Enable copy and paste with clipboard supplied by OS
set clipboard=unnamed
if has('unnamedplus')
    set clipboard+=unnamedplus
endif

" Character encodings and newline
set encoding=utf-8
set fileformats+=mac
set fileencodings=utf-8,iso-2022-jp,cp932,euc-jp,default,latin1

" Save undo file for recovering
if has('persistent_undo')
    let &undodir = s:undodir_root
    set undofile
    " Maximum number of changes that can be undone
    set undolevels=1024
    " Maximum number lines to save for undo on a buffer reload
    " set undoreload=0
endif

" File and buffer control
set confirm
set hidden
set autoread
set noautowriteall
set nobackup
set noswapfile
set writebackup

" Command-line
set wildmenu
set wildmode=longest:full,full
set history=1024

" Backspace and other control keys' action
" - allow <BS> to take effect over indents, eols and start position in insert mode
" - do not allow <BS> and <Space> to move across lines in normal mode
set backspace=indent,eol,start
set whichwrap-=b,s

" Letter type recognized for <C-a> and <C-x>
set nrformats-=octal

" Enable moving cursor to virtual space
set virtualedit& virtualedit+=block

" Display multi-byte symbol properly
set ambiwidth=double

" Scrolling
set scrolljump=1
set scrolloff=5
set sidescroll=1
set sidescrolloff=10

" Tab
set expandtab        " expand tab into spaces
set tabstop=4        " Tab (ASCII:0x09) width on display
set softtabstop=4    " Width inserted on pushing tab key
set smarttab

" Indent control
set shiftwidth=4     " automatic indent width
set autoindent
set smartindent
set nocindent
set cinoptions=>s,Ls,:0,l1,g0,t0,i0,+s,(s,U1,m1
" set copyindent
" cf.
" autoindent  - noautoinden      " inherit indent level of previous line
" smartindent - nosmartindent    " in addition to above, recognize c syntax
" cindent     - nocindent        " more smarter than 2 mode above
" indentexpr                     " run vim script
" Indent with of vim script
let g:vim_indent_cont = &shiftwidth

" Pair(s) of characters recognized by `%' command
set matchpairs+=<:>

" Folding
set foldmethod=marker
set foldlevel=0
set foldlevelstart=-1

" Searching
set incsearch     " incremental search
set hlsearch      " highlight search
set nowrapscan    " search wrap around the end of file
set ignorecase    " ignore case in search patterns
set smartcase     " no ignore case when pattern has uppercase
set nogdefault

" Direction of split
set splitbelow
set splitright

" Timeout
set timeout
set ttimeout
set timeoutlen=1000
set ttimeoutlen=100

" Formatting on end of line
set textwidth=0
set wrapmargin&
set formatoptions&
set paste&
" set colorcolumn=100
if v:version >= 800
    set breakindent
endif

" Enable mouse control
set mouse=a

" Enable modeline
set modeline

" Encryption algorithm used by command-line option [-x] or Ex command [:X]
if v:version < 703
    set cryptmethod=zip
elseif v:version < 705
    set cryptmethod=blowfish
else
    set cryptmethod=blowfish2
endif

" Disable beep sounds
set visualbell
set t_vb=
set noerrorbells

" For input completion
set completeopt-=preview


" --------------------------------------------------
"  Option configurations (for appearance)
" --------------------------------------------------
" Visualize blank characters
set list    " enable showing listchars
set listchars=tab:>-,trail:-,extends:>,precedes:<,nbsp:%

" Visual settings
set number           " show line number
set nowrap           " show with long content wrapped
set showcmd          " show command on command line
set cmdheight=2      " height of command line
set showmatch        " highlight matching brace of bracket
set matchtime=3      " tenths of a second to show matching
set nocursorline     " highlight line of cursor FIXME unset because it makes cursor move slow
" set cursorcolumn    " highlight screen column of cursor
" set helpheight=1023

" Statusline settings
set laststatus=2     " condition to show status line
" set title           " show title on status line
" set ruler           " show cursor position on status line
set statusline&
set statusline+=%<
set statusline+=%f
set statusline+=%{'\ '}
set statusline+=%m
set statusline+=%{&readonly?'[RO]':''}
set statusline+=%{&filetype=='help'?'[HELP]':''}
set statusline+=%{&previewwindow?'[PREV]':''}
set statusline+=%=
set statusline+=%{'['.(&fileencoding!=''?&fileencoding:&encoding).'/'.&fileformat.']'}
set statusline+=[%03l,%03v][%3p%%]

" Tabline settings
set showtabline=1
set tabline=%!MyTabLine()


" --------------------------------------------------
"  Color scheme configurations
" --------------------------------------------------
runtime bunches/colorscheme.vim


" --------------------------------------------------
"  For vim on specific environment
" --------------------------------------------------
" Deal with problem that input method is enabled
" when enter insert and search mode under Windows
set iminsert=0
set imsearch=-1

" Cursor shape (only mintty terminal)
if has('win32unix')
    let &t_ti .= "\e[1 q"    " Make mintty into termcap mode
    let &t_SI .= "\e[5 q"    " Entering insert mode
    let &t_EI .= "\e[1 q"    " Leaving insert mode
    let &t_te .= "\e[0 q"    " Make mintty cursor into default
endif
" cf.
" ESC [ 0 SP q : Default of mintty
" ESC [ 1 SP q : Block, Blink
" ESC [ 2 SP q : Block, Steady
" ESC [ 3 SP q : Underline, Blink
" ESC [ 4 SP q : Underline, Steady
" ESC [ 5 SP q : Vertical line, Blink
" ESC [ 6 SP q : Vertical line, Steady


" --------------------------------------------------
"  Autocommands
" --------------------------------------------------
augroup myvimrc
    autocmd!
augroup END

augroup myvimrc
    " Trim trailing white space characters
    autocmd BufWritePre * %s/\s\+$//e
    " Jump to the last known position in a file
    autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | execute "normal! g`\"" | endif
    " On executing grep like command, open Quickfix window
    autocmd QuickFixCmdPost *grep* cwindow
augroup END

" augroup vimrc-adjust-forcedly
"     autocmd!
"     autocmd VimEnter * setlocal formatoptions=rqnmMj
"     autocmd VimEnter * setlocal formatoptions-=t formatoptions-=c formatoptions-=o
" augroup END

" On saving vimrc and gvimrc, reload them
augroup myvimrc
    autocmd BufWritePost $MYVIMRC source $MYVIMRC
    autocmd BufWritePost $MYGVIMRC if has('gui_running') | source $MYGVIMRC | endif
augroup END

" For binary xxd mode (vim standard feature)
augroup myvimrc
    autocmd BufReadPre *.bin let &binary =1
    autocmd BufReadPost * if &binary | silent %!xxd -g 1
    autocmd BufReadPost * set ft=xxd | endif
    autocmd BufWritePre * if &binary | %!xxd -r | endif
    autocmd BufWritePost * if &binary | silent %!xxd -g 1
    autocmd BufWritePost * set nomod | endif
augroup END

" Restore t_Co for less command after vim quits
" -- Set 256 colors --
let s:saved_t_Co = &t_Co
augroup myvimrc
    if s:saved_t_Co == 8
        autocmd VimLeave * let &t_Co = 256
    else
        autocmd VimLeave * let &t_Co = 8
    endif
    autocmd VimLeave * let &t_Co = s:saved_t_Co
augroup END

" Changing color of statusline for insert mode
if has('syntax')
    augroup myvimrc
        autocmd InsertEnter * call s:StatusLine('Enter')
        autocmd InsertLeave * call s:StatusLine('Leave')
    augroup END
endif


" --------------------------------------------------
"  Commands
" --------------------------------------------------
command! Bdelete call s:ClearBuffer(0)
command! Bwipeout call s:ClearBuffer(1)

command! -nargs=1 -count ContinuousNumber call s:ContinuousNumber(<count>, <q-args>)
command! -nargs=1 -complete=option ToggleOption call s:ToggleOption(<q-args>)
command! -nargs=1 InsertNewline call s:InsertNewline(<args>)


" --------------------------------------------------
"  Functions
" --------------------------------------------------
" Run bdelete without closing the window
function! s:ClearBuffer(wipeout)
    let command = a:wipeout ? 'bwipeout' : 'bdelete'
    if !buflisted(winbufnr(0))
        execute command . '!'
        return
    endif

    let currentbuf = bufnr('%')
    let currentwin = winnr()
    let listedbufs = 0
    let jumpingbuf = 0

    windo call s:ChangeBuffer(currentbuf)
    execute currentwin . 'wincmd w'

    for i in range(1, bufnr('$'))
        if i != currentbuf
            if buflisted(i)
                let listedbufs += 1
            elseif bufexists(i) && !strlen(bufname(i)) && !jumpingbuf
                let jumpingbuf = i
            endif
        endif
    endfor
    if !listedbufs
        if jumpingbuf
            windo execute 'if buflisted(winbufnr(0)) | execute "buffer! " . jumpingbuf | endif'
        else
            enew
            windo execute 'if buflisted(winbufnr(0)) | execute "buffer! " . bufnr("%") | endif'
        endif
        execute currentwin . 'wincmd w'
    endif
    if buflisted(currentbuf) || currentbuf == bufnr('%')
        execute command . '! ' . currentbuf
    endif
    if !listedbufs
        setlocal buflisted
        setlocal bufhidden=
        setlocal buftype=
    endif
endfunction

function! s:ChangeBuffer(target_buf)
    if bufnr('%') == a:target_buf
        let prevbuf = bufnr('#')
        if prevbuf > 0 && buflisted(prevbuf) && prevbuf != a:target_buf
            buffer #
        else
            bnext
        endif
    endif
endfunction


" Change color of statusline in entering inset mode
function! s:StatusLine(mode)
    silent! let s:savedhlcmd = 'highlight ' . s:GetHighlight('StatusLine')
    lockvar s:savedhlcmd
    if a:mode == 'Enter'
        silent execute 'highlight StatusLine gui=bold guifg=LightCyan guibg=Orange cterm=bold ctermfg=LightCyan ctermbg=DarkYellow'
    else
        highlight clear StatusLine
        silent execute s:savedhlcmd
    endif
endfunction

function! s:GetHighlight(group)
    redir => hlconf
    execute 'highlight ' . a:group
    redir END
    let hlconf = substitute(hlconf, '[\r\n]', '', 'g')
    let hlconf = substitute(hlconf, 'xxx', '', '')
    return hlconf
endfunction


" Configure tab line by a string specifying the way
function! MyTabLine()
    let str = ''
    for i in range(1, tabpagenr('$'))
        " select the highlighting
        let is_active = (i == tabpagenr())
        if is_active
            let str .= '%#TabLineSel#'
        else
            let str .= '%#TabLine#'
        endif
        " the label is made by MyTabLabel()
        let str .= '%' . i . 'T' . ' %{MyTabLabel(' . i . ',' . is_active . ')} '
    endfor

    " after the last tab fill with TabLineFill and reset tab page nr
    let str .= '%#TabLineFill#%T'

    " right-align the label to close the current tab page
    if tabpagenr('$') > 1
        let str .= '%=%#TabLine#%XCLOSE'
    endif

    return str
endfunction

function! MyTabLabel(n, is_active)
    let buflist = tabpagebuflist(a:n)
    let focused = buflist[tabpagewinnr(a:n) - 1]
    let repname = fnamemodify(bufname(focused), ':.')
    let modified = 0

    if getbufvar(focused, '&filetype') == 'help'
        let repname = '[HELP]'
    elseif !a:is_active
        let repname = fnamemodify(repname, ':t')
    endif

    for i in buflist
        if buflisted(i) && getbufvar(i, '&modified')
            let modified = 1
            break
        endif
    endfor

    return len(buflist) . (modified ? '+' : '') . ' ' . repname
endfunction


function! s:ContinuousNumber(count, command)
    let c = col('.')
    for n in range(1, a:count ? a:count - line('.') : 0)
        execute 'normal! j' . n . a:command
        call cursor('.', c)
    endfor
endfunction


function! s:ToggleOption(option)
    execute 'setlocal ' . a:option . '!'
    execute 'setlocal ' . a:option . '?'
endfunction


function! s:InsertNewline(count)
    let above = a:count < 0
    for i in range(abs(a:count))
        let lnum = line('.')
        call append(lnum - (above ? 1 : 0), '')
        call cursor(lnum + (above ? 0 : 1), 00)
    endfor
endfunction


" --------------------------------------------------
"  Key-mappings
" --------------------------------------------------
nnoremap Y y$
vnoremap <silent> * "vy/\V<C-r>=substitute(escape(@v, '\/'), "\n", '\\n', 'g')<CR><CR>
vnoremap <silent> # "vy?\V<C-r>=substitute(escape(@v, '\?'), "\n", '\\n', 'g')<CR><CR>

" Disable searching or its highlight
nnoremap <silent> <Esc><Esc> :nohlsearch<CR>
nnoremap <silent> <Esc><CR> :let @/ = ''<CR>

" Move one line for wrapped lines
nnoremap j gj
onoremap j gj
xnoremap j gj
nnoremap k gk
onoremap k gk
xnoremap k gk
nnoremap gj j
nnoremap gk k

" Swap : for ; to enter command-mode
nnoremap ; :
nnoremap : ;
vnoremap ; :
vnoremap : ;

" Redraw, line with searched word at center of window
nnoremap n nzz
nnoremap N Nzz
nnoremap * *zz
nnoremap # #zz
nnoremap g* g*zz
nnoremap g# g#zz

" Use arrow-keys to control window
nnoremap <Left> <C-w>h
nnoremap <Down> <C-w>j
nnoremap <Up> <C-w>k
nnoremap <Right> <C-w>l
nnoremap <S-Left> <C-w><
nnoremap <S-Right> <C-w>>
nnoremap <S-Up> <C-w>+
nnoremap <S-Down> <C-w>-

" Make it unavailable
noremap Q <Nop>
noremap ZZ <Nop>
noremap ZQ <Nop>

" Launch frequently used command for convenience
nnoremap <expr> cd ':lcd ' . expand('%:h') . '<CR>'
nnoremap <expr> <Space>g ':vimgrep /\<' . expand('<cword>') . '\>/gj **/*.' . expand('%:e')
nnoremap <expr> <Space>G ':silent grep! ' . expand('<cword>') . ' *'

" Move action in insert-mode
inoremap <expr> <C-a> search('^\s\s*\%#', 'bcn') ? "\<C-o>0" : "\<C-o>^"
inoremap        <C-e> <C-o>$
inoremap        <C-f> <Right>
inoremap        <C-b> <Left>

" Escape automatically a letter of backslash or question
cnoremap <expr> / getcmdtype() == '/' ? '\/' : '/'
cnoremap <expr> ? getcmdtype() == '?' ? '\?' : '?'

nnoremap [buffer] <Nop>
nmap <Space>b [buffer]
noremap [buffer] :buffer<Space>
noremap <silent> [buffer]b :buffers<CR>
noremap <silent> [buffer]B :buffers!<CR>
noremap <silent> [buffer]n :bnext<CR>
noremap <silent> [buffer]p :bprevious<CR>
noremap <silent> [buffer]d :Bdelete<CR>
noremap <silent> [buffer]D :bdelete!<CR>
noremap <silent> [buffer]w :Bwipeout<CR>
noremap <silent> [buffer]W :bwipeout!<CR>

nnoremap [quickfix] <Nop>
nmap <Space>q [quickfix]
nnoremap <silent> [quickfix]q :copen<CR>
nnoremap <silent> [quickfix]n :cnext<CR>
nnoremap <silent> [quickfix]p :cprevious<CR>
nnoremap <silent> [quickfix]g :cfirst<CR>
nnoremap <silent> [quickfix]G :clast<CR>

nnoremap [switch] <Nop>
nmap <Space>s [switch]
nnoremap <silent> [switch]s :setlocal spell!<CR>:setlocal spell?<CR>
nnoremap <silent> [switch]l :setlocal list!<CR>:setlocal list?<CR>
nnoremap <silent> [switch]t :setlocal expandtab!<CR>:setlocal expandtab?<CR>
nnoremap <silent> [switch]w :setlocal wrap!<CR>:setlocal wrap?<CR>
nnoremap <silent> [switch]n :setlocal number!<CR>:setlocal number?<CR>
nnoremap <silent> [switch]r :setlocal relativenumber!<CR>:setlocal relativenumber?<CR>

" For my functions or commands
nnoremap <silent> co :ContinuousNumber <C-a><CR>
vnoremap <silent> co :ContinuousNumber <C-a><CR>

" Enable input completion anytime
" for s:key in split('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_', '\zs')
"     execute "imap <expr> " . s:key . " pumvisible() ? '" . s:key . "' : '" . s:key . "\<C-x>\<C-p>\<C-n>'"
" endfor





" ==================================================
"  Plugins
" ==================================================

" --------------------------------------------------
"  Plugins installed by default
" --------------------------------------------------
" netrw.vim {{{
let g:netrw_liststyle = 3
let g:netrw_list_hide = '\(^\|\s\s\)\zs\.\S\+'
" separated direction on pushing 'o' key
" let g:netrw_alto = 1
" separated direction on pushing 'v' key
" let g:netrw_altv = 1
" }}}

" python.vim {{{
let python_highlight_all = 1
" }}}

" php.vim {{{
let g:php_sql_query = 1
let g:php_baselib = 1
let g:php_htmlInStrings = 1
let g:php_noShortTags = 1
let g:php_parent_error_close = 1
let g:php_parent_error_open = 1
" }}}

" java.vim {{{
let g:java_highlight_java_lang_ids=1
let g:java_highlight_debug=1
let g:java_highlight_functions='style'
" }}}

" sql.vim and ft-sql {{{
let g:sql_type_default = 'mysql'
" }}}

" tex.vim and ft-tex-plugin {{{
let g:tex_comment_nospell = 1
let g:tex_conceal = ''
let g:tex_flavor = 'latex'
" }}}


" --------------------------------------------------
"  Plugins installed by dein.vim
" --------------------------------------------------
let s:dein_cache_path = expand('$HOME/.cache/vim/dein')
let s:dein_repository = s:dein_cache_path . '/repos/github.com/Shougo/dein.vim'

" In the case that bundle directory is not found
if !isdirectory(s:dein_repository)
    echomsg 'Plugin manager is not found'
    echomsg 'Install dein.vim with a following instruction'
    echomsg '$ git clone https://github.com/Shougo/dein.vim ' . s:dein_repository
    echomsg ''

    let s:choice = confirm('Do you want to quit vim?', "&Yes\n&No", 2)
    if s:choice == 1
        exit
    else
        filetype plugin indent on
        finish
    endif
endif

if has('vim_starting')
    let &runtimepath .= ','
    let &runtimepath .= s:dein_repository
    let &runtimepath .= ','
    let &runtimepath .= $MYVIMHOME
endif

if dein#load_state(s:dein_cache_path)
    call dein#begin(s:dein_cache_path)
    call dein#load_toml(expand('$MYVIMHOME/dein.toml'), {'lazy': 0})
    call dein#load_toml(expand('$MYVIMHOME/dein_lazy.toml'), {'lazy': 1})
    call dein#end()
    call dein#save_state()
endif

call dein#call_hook('source')
augroup myvimrc
    autocmd VimEnter * call dein#call_hook('post_source')
augroup END

if dein#check_install()
    call dein#install()
endif


" Enable automatic detection
" - filetype
" - plugin correlated with filetype
" - indent correlated with filetype
filetype plugin indent on
